<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>git开发流程简述</title>
    <url>/2020/07/06/git%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B%E7%AE%80%E8%BF%B0/</url>
    <content><![CDATA[<h3 id="功能分支开发流简述"><a href="#功能分支开发流简述" class="headerlink" title="功能分支开发流简述"></a>功能分支开发流简述</h3><p>功能分支工作流是一种被证明的高效的多人合作开发模式，其核心思想是所有的功能开发都应该有一个专门的分支，而不是在主干分支上。这样的隔离模式可以方便多个开发者在各自的功能分支上开发而不会弄乱主干代码。另外也保证了主干分支的代码一定是没有问题可随时上线的，极大的有利于在集成环境中合作开发。</p>
<p>功能分支工作流也让code review 变得很方便，每个开发者在将自己的功能分支合并到主干分支（或迭代分支）时发起code review流程，由其他开发者审阅和讨论，这将有助于提升团队的代码质量。</p>
<p>功能分支工作流的总流程如下图所示：</p>
<span id="more"></span>

<img src="/images/git_flow.png" class="" title="git分支工作流">



<h3 id="一个日常示例"><a href="#一个日常示例" class="headerlink" title="一个日常示例"></a>一个日常示例</h3><p><strong>拉取迭代分支</strong></p>
<p>PM周五召集RD们开需求会，确定下一阶段迭代需求的开发工作，会后开发负责人从master拉取了一个迭代分支</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[work@dev web] (master) $ git pull</span><br><span class="line">Already up to date.</span><br><span class="line">[work@dev web] (master) $ git checkout -b iterative_20200706</span><br><span class="line">Switched to a new branch <span class="string">&#x27;iterative_20200706&#x27;</span></span><br><span class="line">[work@dev web] (iterative_20200706) $ git push -u origin iterative_20200706</span><br><span class="line">Branch <span class="string">&#x27;iterative_20200706&#x27;</span> <span class="built_in">set</span> up to track remote branch <span class="string">&#x27;iterative_20200706&#x27;</span> from <span class="string">&#x27;origin&#x27;</span>.</span><br></pre></td></tr></table></figure>



<p><strong>拉取功能分支</strong></p>
<p>RD们内部沟通并分解完任务后，分别从迭代分支拉取了各自的开发分支，并进入肝代码的节奏中</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 张三负责开发”工单系统“</span></span><br><span class="line">[zhang3@dev web] (iterative_20200706) $ git pull</span><br><span class="line">Already up to date.</span><br><span class="line">[zhang3@dev web] (iterative_20200706) $ git checkout -b zhang3_issue</span><br><span class="line">Switched to a new branch <span class="string">&#x27;zhang3_issue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 李四负责开发”导出系统“</span></span><br><span class="line">[li4@dev web] (iterative_20200706) $ git pull</span><br><span class="line">Already up to date.</span><br><span class="line">[li4@dev web] (iterative_20200706) $ git checkout -b li4_export</span><br><span class="line">Switched to a new branch <span class="string">&#x27;li4_export&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 王五负责开发”安全洞察“</span></span><br><span class="line">[wang5@dev web] (iterative_20200706) $ git pull</span><br><span class="line">Already up to date.</span><br><span class="line">[wang5@dev web] (iterative_20200706) $ git checkout -b wang5_insight</span><br><span class="line">Switched to a new branch <span class="string">&#x27;wang5_insight&#x27;</span></span><br></pre></td></tr></table></figure>



<p><strong>提交功能分支代码</strong></p>
<p>周四晚上，工程师李四率先完成了自己的开发工作并自测完毕，决定提交Merge Request并发起code review流程，由具有代码合并权限的开发负责人审查后合并，然后向QA提测</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看修改的文件</span></span><br><span class="line">[li4@dev web] (li4_export) $ git status -s</span><br><span class="line"> M web/config.py</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 添加到暂存区</span></span><br><span class="line">[li4@dev web] (li4_export) $ git add .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交commit</span></span><br><span class="line">[li4@dev web] (li4_export) $ git commit -m <span class="string">&#x27;李四关于导出系统的修改&#x27;</span></span><br><span class="line">1 file changed, 5 insertions(+), 5 deletions(-)</span><br><span class="line"></span><br><span class="line"><span class="comment"># rebase </span></span><br><span class="line">[li4@dev web] (li4_export) $ git pull --rebase origin iterative_20200706</span><br><span class="line"> * branch            iterative_20200706 -&gt; FETCH_HEAD</span><br><span class="line">Current branch li4_export is up to date.</span><br><span class="line"></span><br><span class="line"><span class="comment"># push</span></span><br><span class="line">[li4@dev web] (li4_export) $ git push -u origin li4_export</span><br><span class="line"> * [new branch]      li4_export -&gt; li4_export</span><br><span class="line">Branch <span class="string">&#x27;li4_export&#x27;</span> <span class="built_in">set</span> up to track remote branch <span class="string">&#x27;li4_export&#x27;</span> from <span class="string">&#x27;origin&#x27;</span>.</span><br></pre></td></tr></table></figure>

<p>李四做完以上操作后，去gitlab上发起Merge Request开始code review流程，如图所示：</p>
<img src="/images/git_mr.png" class="" title="git提交mr">



<p>开发负责人需要履行自己审核代码的职责，认真阅读代码并且无异议后，将李四的代码合并到迭代分支。</p>
<p><strong>提交功能分支代码</strong></p>
<p>待其他工程师陆续完成自己的开发工作，各自创建了自己的code review流程并合并代码，并且QA也测试验收通过，确定达到上线标准。负责人需要将迭代分支合并到master上，完成本轮迭代开发。</p>
<h3 id="线上紧急BUG处理"><a href="#线上紧急BUG处理" class="headerlink" title="线上紧急BUG处理"></a>线上紧急BUG处理</h3><p>当发现线上出现故障或BUG，需要紧急处理时，直接从master拉取分支进行修复，流程如下图的红色部分：</p>
<img src="/images/git_flow_fix.png" class="" title="git fix bug">

<p>在日常开发中，如果发现线上bug或是后期待优化的点，建议提交issue：</p>
<img src="/images/git_issue.png" class="" title="git issue">

<p>issue建立后，基于issue创建对应的处理分支，后续在该分支上进行修复或开发</p>
<img src="/images/git_issue_br.png" class="" title="git issue branch">



<h3 id="精简版分支开发流程"><a href="#精简版分支开发流程" class="headerlink" title="精简版分支开发流程"></a>精简版分支开发流程</h3><p>在日常开发工作中，由于需求内容相对简单独立，并没有使用迭代开发的流程，这类项目适用于精简版的分支开发流程，如下图所示：</p>
<img src="/images/git_flow_mini.png" class="" title="git flow mini">


<h3 id="分支管理规范"><a href="#分支管理规范" class="headerlink" title="分支管理规范"></a>分支管理规范</h3><ol>
<li><p>迭代分支命名规范</p>
<p>迭代分支命名格式为”iteration_描述“，其中描述可以是迭代开始的日期，如”iteration_20200706”，也可以是功能描述，如”iteration_export”， 还可以是版本号，如”iteration_v1“。</p>
</li>
<li><p>功能分支命名规范</p>
<p>功能分支命名格式为”开发者_功能描述”，其中开发者信息不可缺失，如李四建立的开发分支为”lisi_export”，严禁分支取名为无意义的名字。</p>
</li>
<li><p>紧急上线分支命名规范</p>
<p>线上BUG紧急修复的分支命名格式为”开发_功能描述_hotfix“，hotfix后缀用来表示紧急修复。</p>
</li>
<li><p>Code Review规范</p>
<p>合并代码前，必须走code review流程，严禁自己合并自己的代码，同时代码合并者必须起到review的作用，并且承担20%的故障责任。</p>
</li>
</ol>
]]></content>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>DRF最佳实践及源码解读(一)--简介</title>
    <url>/2020/04/18/DRF%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5%E5%8F%8A%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB-%E4%B8%80-%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<img src="/images/djangorestframework.png" class="" title="DRF框架">

<p>Django REST framework 框架是一个用于构建REST API 的强大而又灵活的工具，DRF框架建立在Django框架基础之上。</p>
<span id="more"></span>

<p><strong>DRF特点:</strong></p>
<ul>
<li>提供了定义序列化器Serializer的方法，可以快速根据 Django ORM 或者其它库自动序列化/反序列化</li>
<li>提供了丰富的类视图、Mixin扩展类，简化了视图的编写</li>
<li>丰富的定制层级：函数视图、类视图、视图集合到自动生成 API，满足各种需要</li>
<li>支持多种身份认证和权限认证方式</li>
<li>内置灵活的限流系统</li>
<li>直观的 API web 界面</li>
<li>具有丰富的插件和强大扩展性</li>
</ul>
]]></content>
      <categories>
        <category>Python</category>
        <category>Web</category>
      </categories>
      <tags>
        <tag>Django</tag>
        <tag>Python</tag>
        <tag>Restful</tag>
      </tags>
  </entry>
  <entry>
    <title>DRF最佳实践及源码解读(七)--权限</title>
    <url>/2020/04/19/DRF%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5%E5%8F%8A%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB-%E4%B8%83-%E6%9D%83%E9%99%90/</url>
    <content><![CDATA[<img src="/images/djangorestframework.png" class="" title="DRF框架">

<span id="more"></span>

<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">1.自定义认证类，继承rest_framework.permissions.BasePermission, 实现has_permission方法</span></span><br><span class="line"><span class="string">2.视图类局部配置或全局配置</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> rest_framework.permissions <span class="keyword">import</span> BasePermission</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPermission</span>(<span class="params">BasePermission</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">has_permission</span>(<span class="params">self, request, view</span>):</span></span><br><span class="line">        <span class="keyword">if</span> request.user.user_type != <span class="number">3</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span>    <span class="comment"># 无权访问</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span>     <span class="comment"># 有权访问</span></span><br><span class="line">        </span><br><span class="line"><span class="comment"># 局部配置</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserView</span>(<span class="params">APIView</span>):</span></span><br><span class="line">    <span class="comment"># 视图类中局部配置</span></span><br><span class="line">    permission_classes = [MyPermission,]</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="comment"># 全局配置</span></span><br><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="string">&#x27;DEFAULT_PERMISSION_CLASSES&#x27;</span>: [<span class="string">&#x27;api.permissions.MyPermission&#x27;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_permissions</span>(<span class="params">self, request</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Check if the request should be permitted.</span></span><br><span class="line"><span class="string">    Raises an appropriate exception if the request is not permitted.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> permission <span class="keyword">in</span> self.get_permissions():</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> permission.has_permission(request, self):</span><br><span class="line">            self.permission_denied(</span><br><span class="line">                request, message=<span class="built_in">getattr</span>(permission, <span class="string">&#x27;message&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">            )</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python</category>
        <category>Web</category>
      </categories>
      <tags>
        <tag>Django</tag>
        <tag>Python</tag>
        <tag>Restful</tag>
      </tags>
  </entry>
  <entry>
    <title>DRF最佳实践及源码解读(三)--路由</title>
    <url>/2020/04/18/DRF%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5%E5%8F%8A%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB-%E4%B8%89-%E8%B7%AF%E7%94%B1/</url>
    <content><![CDATA[<img src="/images/djangorestframework.png" class="" title="DRF框架">

<span id="more"></span>

<h2 id="Django原始路由配置"><a href="#Django原始路由配置" class="headerlink" title="Django原始路由配置"></a>Django原始路由配置</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r&#x27;^(?P&lt;version&gt;v[12])/view/$&#x27;</span>, views.MyView.as_view()),</span><br><span class="line">    url(<span class="string">r&#x27;^(?P&lt;version&gt;v[12])/view2/$&#x27;</span>, views.MyViewSet.as_view(&#123;<span class="string">&#x27;get&#x27;</span>: <span class="string">&#x27;list&#x27;</span>, <span class="string">&#x27;post&#x27;</span>: <span class="string">&#x27;create&#x27;</span>&#125;)),</span><br><span class="line">    url(<span class="string">r&#x27;^(?P&lt;version&gt;v[12])/view2/(?P&lt;pk&gt;\d+)/$&#x27;</span>, views.MyViewSet.as_view(&#123;<span class="string">&#x27;get&#x27;</span>: <span class="string">&#x27;retrieve&#x27;</span>&#125;)),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h2 id="DRF视图集自动路由"><a href="#DRF视图集自动路由" class="headerlink" title="DRF视图集自动路由"></a>DRF视图集自动路由</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">router = routers.DefaultRouter()</span><br><span class="line">router.register(<span class="string">&#x27;users&#x27;</span>, UserViewSet, <span class="string">&#x27;user&#x27;</span>)</span><br><span class="line">router.register(<span class="string">&#x27;accounts&#x27;</span>, AccountViewSet, <span class="string">&#x27;account&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注册方式一</span></span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    ...,</span><br><span class="line">    url(<span class="string">r&#x27;^(?P&lt;version&gt;v[12])/&#x27;</span>, include(router.urls)),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注册方式二</span></span><br><span class="line"></span><br><span class="line">urlpatterns += router.urls</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python</category>
        <category>Web</category>
      </categories>
      <tags>
        <tag>Django</tag>
        <tag>Python</tag>
        <tag>Restful</tag>
      </tags>
  </entry>
  <entry>
    <title>DRF最佳实践及源码解读(二)--视图</title>
    <url>/2020/04/18/DRF%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5%E5%8F%8A%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB-%E4%BA%8C-%E8%A7%86%E5%9B%BE/</url>
    <content><![CDATA[<img src="/images/djangorestframework.png" class="" title="DRF框架">

<h2 id="DRF视图类最佳实践"><a href="#DRF视图类最佳实践" class="headerlink" title="DRF视图类最佳实践"></a>DRF视图类最佳实践</h2><p>简单增删改查：<code>ModelViewSet</code></p>
<p>增删：<code>CreateModelMixin</code> + <code>DestroyModelMixin</code> + <code>GenericViewSet</code></p>
<p>复杂逻辑：<code>GenericViewSet</code> 或 <code>APIView</code> (多个路由的相同请求方法使用同一个视图类的时候，使用<code>GenericViewSet</code>)</p>
<span id="more"></span>



<h3 id="视图类继承关系"><a href="#视图类继承关系" class="headerlink" title="视图类继承关系"></a>视图类继承关系</h3><img src="/images/drf_view_class.png" class="" title="DRF视图类继承关系">


<h3 id="视图类源码解读"><a href="#视图类源码解读" class="headerlink" title="视图类源码解读"></a>视图类源码解读</h3><h4 id="django-views-generic-View"><a href="#django-views-generic-View" class="headerlink" title="django.views.generic.View"></a>django.views.generic.View</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># django原生CBV</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.views.generic <span class="keyword">import</span> View</span><br><span class="line"><span class="comment"># 对视图函数的装饰需要使用method_decorator</span></span><br><span class="line"><span class="keyword">from</span> django.utils.decorators <span class="keyword">import</span> method_decorator</span><br><span class="line"></span><br><span class="line"><span class="meta">@method_decorator(<span class="params">uc_login_required(<span class="params"></span>), name=<span class="string">&#x27;dispatch&#x27;</span></span>)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CheckERPView</span>(<span class="params">View</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    django原生CVB使用示例</span></span><br><span class="line"><span class="string">    通过viewClass.as_view()返回包装后的视图函数，同时以闭包的方式将视图类封装进视图函数</span></span><br><span class="line"><span class="string">    在View.dispatch()中通过对请求方法的判断将请求分发到具体的get/post/put/delete方法中</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self, request, *args, **kwargs</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span>(<span class="params">self, request, *args, **kwargs</span>)):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>




<h4 id="rest-framework-views-APIView"><a href="#rest-framework-views-APIView" class="headerlink" title="rest_framework.views.APIView"></a>rest_framework.views.APIView</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">DRF基础视图类</span></span><br><span class="line"><span class="string">APIView是DRF提供的所有视图的基类继承自Django的View</span></span><br><span class="line"><span class="string">APIVIew通过对dispatch方法的增强，主要实现了以下功能:</span></span><br><span class="line"><span class="string">    1.initialize_request()对django的request进行封装，得到DRF的request</span></span><br><span class="line"><span class="string">    2.视图方法可以返回DRF的Response</span></span><br><span class="line"><span class="string">    3.任何APIException异常都会被捕获到，并且处理成合适的响应信息</span></span><br><span class="line"><span class="string">    4.在dispatch()分发前，会对请求进行身份认证、权限检查、流量控制，相应的扩展通过类属性进行配置，可以在类中局部配置，也可以在配置文件中全局配置</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">APIView</span>(<span class="params">View</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># The following policies may be set at either globally, or per-view.</span></span><br><span class="line">    renderer_classes = api_settings.DEFAULT_RENDERER_CLASSES</span><br><span class="line">    parser_classes = api_settings.DEFAULT_PARSER_CLASSES</span><br><span class="line">    authentication_classes = api_settings.DEFAULT_AUTHENTICATION_CLASSES</span><br><span class="line">    throttle_classes = api_settings.DEFAULT_THROTTLE_CLASSES</span><br><span class="line">    permission_classes = api_settings.DEFAULT_PERMISSION_CLASSES</span><br><span class="line">    content_negotiation_class = api_settings.DEFAULT_CONTENT_NEGOTIATION_CLASS</span><br><span class="line">    metadata_class = api_settings.DEFAULT_METADATA_CLASS</span><br><span class="line">    versioning_class = api_settings.DEFAULT_VERSIONING_CLASS</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Allow dependency injection of other settings to make testing easier.</span></span><br><span class="line">    settings = api_settings</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Mark the view as being included or excluded from schema generation.</span></span><br><span class="line">    exclude_from_schema = <span class="literal">False</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Note: Views are made CSRF exempt from within `as_view` as to prevent</span></span><br><span class="line">    <span class="comment"># accidental removal of this exemption in cases where `dispatch` needs to</span></span><br><span class="line">    <span class="comment"># be overridden.</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dispatch</span>(<span class="params">self, request, *args, **kwargs</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        `.dispatch()` is pretty much the same as Django&#x27;s regular dispatch,</span></span><br><span class="line"><span class="string">        but with extra hooks for startup, finalize, and exception handling.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.args = args</span><br><span class="line">        self.kwargs = kwargs</span><br><span class="line">        request = self.initialize_request(request, *args, **kwargs)</span><br><span class="line">        self.request = request</span><br><span class="line">        self.headers = self.default_response_headers  <span class="comment"># deprecate?</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.initial(request, *args, **kwargs)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># Get the appropriate handler method</span></span><br><span class="line">            <span class="keyword">if</span> request.method.lower() <span class="keyword">in</span> self.http_method_names:</span><br><span class="line">                handler = <span class="built_in">getattr</span>(self, request.method.lower(),</span><br><span class="line">                                  self.http_method_not_allowed)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                handler = self.http_method_not_allowed</span><br><span class="line"></span><br><span class="line">            response = handler(request, *args, **kwargs)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> exc:</span><br><span class="line">            response = self.handle_exception(exc)</span><br><span class="line"></span><br><span class="line">        self.response = self.finalize_response(request, response, *args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> self.response</span><br><span class="line">    </span><br></pre></td></tr></table></figure>


<h4 id="rest-framework-generics-GenericAPIView"><a href="#rest-framework-generics-GenericAPIView" class="headerlink" title="rest_framework.generics.GenericAPIView"></a>rest_framework.generics.GenericAPIView</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">PS:通常不直接使用</span></span><br><span class="line"><span class="string">GenericAPIView继承自APIView</span></span><br><span class="line"><span class="string">增加了对列表视图和详情视图的通用处理方法</span></span><br><span class="line"><span class="string">    1.通过queryset配置查询集</span></span><br><span class="line"><span class="string">    2.通过serializer_class配置序列化器</span></span><br><span class="line"><span class="string">    3.通过pagination_class配置分页器</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GenericAPIView</span>(<span class="params">views.APIView</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Base class for all other generic views.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># You&#x27;ll need to either set these attributes,</span></span><br><span class="line">    <span class="comment"># or override `get_queryset()`/`get_serializer_class()`.</span></span><br><span class="line">    <span class="comment"># If you are overriding a view method, it is important that you call</span></span><br><span class="line">    <span class="comment"># `get_queryset()` instead of accessing the `queryset` property directly,</span></span><br><span class="line">    <span class="comment"># as `queryset` will get evaluated only once, and those results are cached</span></span><br><span class="line">    <span class="comment"># for all subsequent requests.</span></span><br><span class="line">    queryset = <span class="literal">None</span></span><br><span class="line">    serializer_class = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># If you want to use object lookups other than pk, set &#x27;lookup_field&#x27;.</span></span><br><span class="line">    <span class="comment"># For more complex lookup requirements override `get_object()`.</span></span><br><span class="line">    lookup_field = <span class="string">&#x27;pk&#x27;</span></span><br><span class="line">    lookup_url_kwarg = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># The filter backend classes to use for queryset filtering</span></span><br><span class="line">    filter_backends = api_settings.DEFAULT_FILTER_BACKENDS</span><br><span class="line"></span><br><span class="line">    <span class="comment"># The style to use for queryset pagination.</span></span><br><span class="line">    pagination_class = api_settings.DEFAULT_PAGINATION_CLASS</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_queryset</span>(<span class="params">self</span>):</span></span><br><span class="line">        queryset = self.queryset</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(queryset, QuerySet):</span><br><span class="line">            <span class="comment"># Ensure queryset is re-evaluated on each request.</span></span><br><span class="line">            queryset = queryset.<span class="built_in">all</span>()</span><br><span class="line">        <span class="keyword">return</span> queryset</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_object</span>(<span class="params">self</span>):</span></span><br><span class="line">        filter_kwargs = &#123;self.lookup_field: self.kwargs[lookup_url_kwarg]&#125;</span><br><span class="line">        obj = get_object_or_404(queryset, **filter_kwargs)</span><br><span class="line">        <span class="comment"># May raise a permission denied</span></span><br><span class="line">        self.check_object_permissions(self.request, obj)</span><br><span class="line">        <span class="keyword">return</span> obj</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_serializer</span>(<span class="params">self, *args, **kwargs</span>):</span></span><br><span class="line">        serializer_class = self.get_serializer_class()</span><br><span class="line">        kwargs[<span class="string">&#x27;context&#x27;</span>] = self.get_serializer_context()</span><br><span class="line">        <span class="keyword">return</span> serializer_class(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_serializer_class</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.serializer_class</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_serializer_context</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="string">&#x27;request&#x27;</span>: self.request,</span><br><span class="line">            <span class="string">&#x27;format&#x27;</span>: self.format_kwarg,</span><br><span class="line">            <span class="string">&#x27;view&#x27;</span>: self</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">filter_queryset</span>(<span class="params">self, queryset</span>):</span></span><br><span class="line">        <span class="keyword">for</span> backend <span class="keyword">in</span> <span class="built_in">list</span>(self.filter_backends):</span><br><span class="line">            queryset = backend().filter_queryset(self.request, queryset, self)</span><br><span class="line">        <span class="keyword">return</span> queryset</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">paginator</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">hasattr</span>(self, <span class="string">&#x27;_paginator&#x27;</span>):</span><br><span class="line">            <span class="keyword">if</span> self.pagination_class <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                self._paginator = <span class="literal">None</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self._paginator = self.pagination_class()</span><br><span class="line">        <span class="keyword">return</span> self._paginator</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">paginate_queryset</span>(<span class="params">self, queryset</span>):</span></span><br><span class="line">        <span class="keyword">if</span> self.paginator <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        <span class="keyword">return</span> self.paginator.paginate_queryset(queryset, self.request, view=self)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_paginated_response</span>(<span class="params">self, data</span>):</span></span><br><span class="line">        <span class="keyword">assert</span> self.paginator <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span></span><br><span class="line">        <span class="keyword">return</span> self.paginator.get_paginated_response(data)</span><br></pre></td></tr></table></figure>


<h4 id="rest-framework-viewsets-GenericViewSet"><a href="#rest-framework-viewsets-GenericViewSet" class="headerlink" title="rest_framework.viewsets.GenericViewSet"></a>rest_framework.viewsets.GenericViewSet</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">继承自ViewSetMixin和GenericAPIView</span></span><br><span class="line"><span class="string">基于ViewSetMixin对as_view()方法进行升级，实现了请求方法与方法名的自定义绑定</span></span><br><span class="line"><span class="string">配置路由的时候传入请求方法与分发方法的对应关系：</span></span><br><span class="line"><span class="string">    MyViewSet.as_view(&#123;&#x27;get&#x27;: &#x27;list&#x27;, &#x27;post&#x27;: &#x27;create&#x27;&#125;)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GenericViewSet</span>(<span class="params">ViewSetMixin, generics.GenericAPIView</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    The GenericViewSet class does not provide any actions by default,</span></span><br><span class="line"><span class="string">    but does include the base set of generic view behavior, such as</span></span><br><span class="line"><span class="string">    the `get_object` and `get_queryset` methods.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewSetMixin</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    This is the magic.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Overrides `.as_view()` so that it takes an `actions` keyword that performs</span></span><br><span class="line"><span class="string">    the binding of HTTP methods to actions on the Resource.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    For example, to create a concrete view binding the &#x27;GET&#x27; and &#x27;POST&#x27; methods</span></span><br><span class="line"><span class="string">    to the &#x27;list&#x27; and &#x27;create&#x27; actions...</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    view = MyViewSet.as_view(&#123;&#x27;get&#x27;: &#x27;list&#x27;, &#x27;post&#x27;: &#x27;create&#x27;&#125;)</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @classonlymethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">as_view</span>(<span class="params">cls, actions=<span class="literal">None</span>, **initkwargs</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Because of the way class based views create a closure around the</span></span><br><span class="line"><span class="string">        instantiated view, we need to totally reimplement `.as_view`,</span></span><br><span class="line"><span class="string">        and slightly modify the view function that is created and returned.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">view</span>(<span class="params">request, *args, **kwargs</span>):</span></span><br><span class="line">            self = cls(**initkwargs)</span><br><span class="line">            <span class="comment"># We also store the mapping of request methods to actions,</span></span><br><span class="line">            <span class="comment"># so that we can later set the action attribute.</span></span><br><span class="line">            <span class="comment"># eg. `self.action = &#x27;list&#x27;` on an incoming GET request.</span></span><br><span class="line">            self.action_map = actions</span><br><span class="line"></span><br><span class="line">            <span class="comment"># Bind methods to actions</span></span><br><span class="line">            <span class="comment"># This is the bit that&#x27;s different to a standard view</span></span><br><span class="line">            <span class="keyword">for</span> method, action <span class="keyword">in</span> actions.items():</span><br><span class="line">                handler = <span class="built_in">getattr</span>(self, action)</span><br><span class="line">                <span class="built_in">setattr</span>(self, method, handler)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">hasattr</span>(self, <span class="string">&#x27;get&#x27;</span>) <span class="keyword">and</span> <span class="keyword">not</span> <span class="built_in">hasattr</span>(self, <span class="string">&#x27;head&#x27;</span>):</span><br><span class="line">                self.head = self.get</span><br><span class="line"></span><br><span class="line">            self.request = request</span><br><span class="line">            self.args = args</span><br><span class="line">            self.kwargs = kwargs</span><br><span class="line"></span><br><span class="line">            <span class="comment"># And continue as usual</span></span><br><span class="line">            <span class="keyword">return</span> self.dispatch(request, *args, **kwargs)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># take name and docstring from class</span></span><br><span class="line">        update_wrapper(view, cls, updated=())</span><br><span class="line"></span><br><span class="line">        <span class="comment"># and possible attributes set by decorators</span></span><br><span class="line">        <span class="comment"># like csrf_exempt from dispatch</span></span><br><span class="line">        update_wrapper(view, cls.dispatch, assigned=())</span><br><span class="line"></span><br><span class="line">        <span class="comment"># We need to set these on the view function, so that breadcrumb</span></span><br><span class="line">        <span class="comment"># generation can pick out these bits of information from a</span></span><br><span class="line">        <span class="comment"># resolved URL.</span></span><br><span class="line">        view.cls = cls</span><br><span class="line">        view.initkwargs = initkwargs</span><br><span class="line">        view.suffix = initkwargs.get(<span class="string">&#x27;suffix&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">        view.actions = actions</span><br><span class="line">        <span class="keyword">return</span> csrf_exempt(view)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initialize_request</span>(<span class="params">self, request, *args, **kwargs</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Set the `.action` attribute on the view,</span></span><br><span class="line"><span class="string">        depending on the request method.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        request = <span class="built_in">super</span>(ViewSetMixin, self).initialize_request(request, *args, **kwargs)</span><br><span class="line">        method = request.method.lower()</span><br><span class="line">        <span class="keyword">if</span> method == <span class="string">&#x27;options&#x27;</span>:</span><br><span class="line">            <span class="comment"># This is a special case as we always provide handling for the</span></span><br><span class="line">            <span class="comment"># options method in the base `View` class.</span></span><br><span class="line">            <span class="comment"># Unlike the other explicitly defined actions, &#x27;metadata&#x27; is implicit.</span></span><br><span class="line">            self.action = <span class="string">&#x27;metadata&#x27;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.action = self.action_map.get(method)</span><br><span class="line">        <span class="keyword">return</span> request</span><br></pre></td></tr></table></figure>


<h4 id="rest-framework-viewsets-ReadOnlyModelViewSet"><a href="#rest-framework-viewsets-ReadOnlyModelViewSet" class="headerlink" title="rest_framework.viewsets.ReadOnlyModelViewSet"></a>rest_framework.viewsets.ReadOnlyModelViewSet</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">继承两个混合类</span></span><br><span class="line"><span class="string">    - mixins.RetrieveModelMixin  提供retrieve()方法，实现详情视图</span></span><br><span class="line"><span class="string">    - mixins.ListModelMixin     提供list()方法，实现列表视图</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ReadOnlyModelViewSet</span>(<span class="params">mixins.RetrieveModelMixin,</span></span></span><br><span class="line"><span class="params"><span class="class">                           mixins.ListModelMixin,</span></span></span><br><span class="line"><span class="params"><span class="class">                           GenericViewSet</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    A viewset that provides default `list()` and `retrieve()` actions.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<h4 id="rest-framework-viewsets-ModelViewSet"><a href="#rest-framework-viewsets-ModelViewSet" class="headerlink" title="rest_framework.viewsets.ModelViewSet"></a>rest_framework.viewsets.ModelViewSet</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">继承五个混合类</span></span><br><span class="line"><span class="string">    - mixins.CreateModelMixin   提供create()方法，实现创建对象视图</span></span><br><span class="line"><span class="string">    - mixins.RetrieveModelMixin  提供retrieve()方法，实现对象详情视图</span></span><br><span class="line"><span class="string">    - mixins.ListModelMixin     提供list()方法，实现列表视图</span></span><br><span class="line"><span class="string">    - mixins.UpdateModelMixin   提供update()方法，实现更新对象视图</span></span><br><span class="line"><span class="string">    - mixins.DestroyModelMixin  提供destroy()方法，实现删除对象视图</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ModelViewSet</span>(<span class="params">mixins.CreateModelMixin,</span></span></span><br><span class="line"><span class="params"><span class="class">                   mixins.RetrieveModelMixin,</span></span></span><br><span class="line"><span class="params"><span class="class">                   mixins.UpdateModelMixin,</span></span></span><br><span class="line"><span class="params"><span class="class">                   mixins.DestroyModelMixin,</span></span></span><br><span class="line"><span class="params"><span class="class">                   mixins.ListModelMixin,</span></span></span><br><span class="line"><span class="params"><span class="class">                   GenericViewSet</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    A viewset that provides default `create()`, `retrieve()`, `update()`,</span></span><br><span class="line"><span class="string">    `partial_update()`, `destroy()` and `list()` actions.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python</category>
        <category>Web</category>
      </categories>
      <tags>
        <tag>Django</tag>
        <tag>Python</tag>
        <tag>Restful</tag>
      </tags>
  </entry>
  <entry>
    <title>DRF最佳实践及源码解读(五)--解析与序列化</title>
    <url>/2020/04/19/DRF%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5%E5%8F%8A%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB-%E4%BA%94-%E8%A7%A3%E6%9E%90%E4%B8%8E%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    <content><![CDATA[<img src="/images/djangorestframework.png" class="" title="DRF框架">

<span id="more"></span>

<h2 id="解析器：DRF提供不同的解析器对多种类型的请求参数进行封装"><a href="#解析器：DRF提供不同的解析器对多种类型的请求参数进行封装" class="headerlink" title="解析器：DRF提供不同的解析器对多种类型的请求参数进行封装"></a>解析器：DRF提供不同的解析器对多种类型的请求参数进行封装</h2><h3 id="解析器使用"><a href="#解析器使用" class="headerlink" title="解析器使用"></a>解析器使用</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="number">1.</span>全局配置</span><br><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="string">&#x27;DEFAULT_PARSER_CLASSES&#x27;</span>: [<span class="string">&#x27;rest_framework.parsers.JSONParser&#x27;</span>, <span class="string">&#x27;rest_framework.parsers.FormParser&#x27;</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>局部配置</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ParserView</span>(<span class="params">APIView</span>):</span></span><br><span class="line">    <span class="comment"># 局部配置</span></span><br><span class="line">    parser_classes = [FileUploadParser]</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span>(<span class="params">self, request, *args, **kwargs</span>):</span></span><br><span class="line">        data = request.data</span><br><span class="line">        ...</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="解析器原理"><a href="#解析器原理" class="headerlink" title="解析器原理"></a>解析器原理</h3><ol>
<li>在dispatch中对request进行封装</li>
<li>request.data调用时获取配置的解析器</li>
<li>使用解析器解析请求数据并封装</li>
</ol>
<h2 id="序列化器：DRF序列化器提供数据的序列化及反序列化处理"><a href="#序列化器：DRF序列化器提供数据的序列化及反序列化处理" class="headerlink" title="序列化器：DRF序列化器提供数据的序列化及反序列化处理"></a>序列化器：DRF序列化器提供数据的序列化及反序列化处理</h2><h3 id="Serializer"><a href="#Serializer" class="headerlink" title="Serializer"></a>Serializer</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># models</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Group</span>(<span class="params">models.Model</span>):</span></span><br><span class="line"></span><br><span class="line">    group_id = models.AutoField(primary_key=<span class="literal">True</span>)</span><br><span class="line">    group_name = models.CharField(max_length=<span class="number">32</span>, verbose_name=<span class="string">&#x27;组名&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span>(<span class="params">models.Model</span>):</span></span><br><span class="line"></span><br><span class="line">    GENDER_CHOICES = (</span><br><span class="line">        (<span class="number">1</span>, <span class="string">&#x27;male&#x27;</span>),</span><br><span class="line">        (<span class="number">2</span>, <span class="string">&#x27;female&#x27;</span>),</span><br><span class="line">        (<span class="number">3</span>, <span class="string">&#x27;unknown&#x27;</span>)</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    username = models.CharField(max_length=<span class="number">32</span>, verbose_name=<span class="string">&#x27;用户名&#x27;</span>)</span><br><span class="line">    password = models.CharField(max_length=<span class="number">64</span>, verbose_name=<span class="string">&#x27;密码&#x27;</span>)</span><br><span class="line">    gender = models.SmallIntegerField(choices=GENDER_CHOICES, default=<span class="number">3</span>, verbose_name=<span class="string">&#x27;性别&#x27;</span>)</span><br><span class="line">    group = models.ForeignKey(Group)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># serializers</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserSerializer</span>(<span class="params">serializers.Serializer</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;用户序列化器&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">id</span> = serializers.IntegerField()</span><br><span class="line">    username = serializers.CharField(max_length=<span class="number">20</span>)  <span class="comment"># max_length限定字符串最大长度</span></span><br><span class="line">    <span class="comment"># gender = serializers.IntegerField()</span></span><br><span class="line">    gender = serializers.CharField(source=<span class="string">&#x27;get_gender_display&#x27;</span>)  <span class="comment"># source指定对象的属性</span></span><br><span class="line">    <span class="comment"># group_id = serializers.IntegerField(source=&#x27;group.group_id&#x27;)  # source指定对象的属性</span></span><br><span class="line">    group = serializers.CharField(source=<span class="string">&#x27;group.group_name&#x27;</span>)  <span class="comment"># source指定关联对象的属性</span></span><br><span class="line">    desc = serializers.SerializerMethodField()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_desc</span>(<span class="params">self, user</span>):</span></span><br><span class="line">        <span class="comment"># 自定义 SerializerMethodField</span></span><br><span class="line">        <span class="comment"># 实现&#x27;get_ + field&#x27;方法</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;hello&#x27;</span> + user.username</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="comment"># views</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserView</span>(<span class="params">APIView</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self, request, *args, **kwargs</span>):</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 获取用户queryset</span></span><br><span class="line">        users = User.objects.<span class="built_in">all</span>()</span><br><span class="line">        <span class="comment"># 构造序列化器</span></span><br><span class="line">        serializer = UserSerializer(instance=users, many=<span class="literal">True</span>)</span><br><span class="line">        <span class="comment"># 返回序列化数据</span></span><br><span class="line">        <span class="keyword">return</span> JsonResponse(serializer.data, safe=<span class="literal">False</span>)</span><br><span class="line">        </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="ModelSerializer"><a href="#ModelSerializer" class="headerlink" title="ModelSerializer"></a>ModelSerializer</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">在对model进行序列化时可以直接使用ModelSerializer,可以自动生成序列字段</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserModelSerializer</span>(<span class="params">serializers.ModelSerializer</span>):</span></span><br><span class="line"></span><br><span class="line">    group = serializers.SerializerMethodField()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_group</span>(<span class="params">self, user</span>):</span></span><br><span class="line">        <span class="keyword">return</span> user.group.group_name</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = User</span><br><span class="line">        <span class="comment"># fields = &#x27;__all__&#x27;    # 自动生成所有字段</span></span><br><span class="line">        fields = [<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;username&#x27;</span>, <span class="string">&#x27;gender&#x27;</span>, <span class="string">&#x27;group&#x27;</span>]</span><br></pre></td></tr></table></figure>


<h3 id="自动序列化连表深度控制"><a href="#自动序列化连表深度控制" class="headerlink" title="自动序列化连表深度控制"></a>自动序列化连表深度控制</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserDepthSerializer</span>(<span class="params">serializers.ModelSerializer</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = User</span><br><span class="line">        <span class="comment"># fields = &#x27;__all__&#x27;    # 自动生成所有字段</span></span><br><span class="line">        fields = [<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;username&#x27;</span>, <span class="string">&#x27;gender&#x27;</span>, <span class="string">&#x27;group&#x27;</span>]</span><br><span class="line">        depth = <span class="number">1</span>  <span class="comment"># 0~10</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">可以很方便的做数据验证</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserDepthSerializer</span>(<span class="params">serializers.ModelSerializer</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = User</span><br><span class="line">        <span class="comment"># fields = &#x27;__all__&#x27;    # 自动生成所有字段</span></span><br><span class="line">        fields = [<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;username&#x27;</span>, <span class="string">&#x27;gender&#x27;</span>, <span class="string">&#x27;group&#x27;</span>]</span><br><span class="line">        depth = <span class="number">1</span>  <span class="comment"># 0~10</span></span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">validate_username</span>(<span class="params">self, value</span>):</span></span><br><span class="line">        <span class="comment"># 验证单个字段</span></span><br><span class="line">        <span class="keyword">if</span> value.startswith(<span class="string">&#x27;孙&#x27;</span>):</span><br><span class="line">            <span class="keyword">raise</span> serializers.ValidationError(<span class="string">&#x27;名称不合法&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> value</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">validate</span>(<span class="params">self, attrs</span>):</span></span><br><span class="line">        <span class="comment"># 验证多个字段</span></span><br><span class="line">        <span class="keyword">return</span> attrs</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create</span>(<span class="params">self, validated_data</span>):</span></span><br><span class="line">        <span class="comment"># 新建</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span>(<span class="params">self, instance, validated_data</span>):</span></span><br><span class="line">        <span class="comment"># 更新</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserView</span>(<span class="params">APIView</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span>(<span class="params">self, request, *args, **kwargs</span>):</span></span><br><span class="line">        serializer = UserModelSerializer(data=request.data)</span><br><span class="line">        <span class="comment"># 校验数据</span></span><br><span class="line">        serializer.is_valid(raise_exception=<span class="literal">True</span>)</span><br><span class="line">        <span class="comment"># 获取校验通过的数据</span></span><br><span class="line">        data = serializer.validated_data</span><br><span class="line">        <span class="comment"># 当序列化器实例化时没有传instance,则save()方法调用create()方法，反之调用update()方法</span></span><br><span class="line">        serializer.save()</span><br><span class="line">        </span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python</category>
        <category>Web</category>
      </categories>
      <tags>
        <tag>Django</tag>
        <tag>Python</tag>
        <tag>Restful</tag>
      </tags>
  </entry>
  <entry>
    <title>DRF最佳实践及源码解读(八)--流量控制</title>
    <url>/2020/04/19/DRF%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5%E5%8F%8A%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB-%E5%85%AB-%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6/</url>
    <content><![CDATA[<img src="/images/djangorestframework.png" class="" title="DRF框架">

<span id="more"></span>

<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 针对认证用户和非认证用户进行限流</span></span><br><span class="line"></span><br><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="string">&#x27;DEFAULT_THROTTLE_CLASSES&#x27;</span>: (</span><br><span class="line">        <span class="string">&#x27;rest_framework.throttling.AnonRateThrottle&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;rest_framework.throttling.UserRateThrottle&#x27;</span></span><br><span class="line">    ),</span><br><span class="line">    <span class="string">&#x27;DEFAULT_THROTTLE_RATES&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;anon&#x27;</span>: <span class="string">&#x27;4/day&#x27;</span>, <span class="comment"># 匿名用户每天访问4次</span></span><br><span class="line">        <span class="string">&#x27;user&#x27;</span>: <span class="string">&#x27;100/day&#x27;</span>  <span class="comment"># 登录用户访问100次</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 针对不同视图设置不同频次</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ContactListView</span>(<span class="params">APIView</span>):</span></span><br><span class="line">    throttle_scope = <span class="string">&#x27;contacts&#x27;</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ContactDetailView</span>(<span class="params">APIView</span>):</span></span><br><span class="line">    throttle_scope = <span class="string">&#x27;contacts&#x27;</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UploadView</span>(<span class="params">APIView</span>):</span></span><br><span class="line">    throttle_scope = <span class="string">&#x27;uploads&#x27;</span></span><br><span class="line">    ...</span><br><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="string">&#x27;DEFAULT_THROTTLE_CLASSES&#x27;</span>: (</span><br><span class="line">        <span class="string">&#x27;rest_framework.throttling.ScopedRateThrottle&#x27;</span>,</span><br><span class="line">    ),</span><br><span class="line">    <span class="string">&#x27;DEFAULT_THROTTLE_RATES&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;contacts&#x27;</span>: <span class="string">&#x27;1000/day&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;uploads&#x27;</span>: <span class="string">&#x27;20/day&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python</category>
        <category>Web</category>
      </categories>
      <tags>
        <tag>Django</tag>
        <tag>Python</tag>
        <tag>Restful</tag>
      </tags>
  </entry>
  <entry>
    <title>DRF最佳实践及源码解读(六)--认证</title>
    <url>/2020/04/19/DRF%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5%E5%8F%8A%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB-%E5%85%AD-%E8%AE%A4%E8%AF%81/</url>
    <content><![CDATA[<img src="/images/djangorestframework.png" class="" title="DRF框架">

<span id="more"></span>

<h2 id="使用认证"><a href="#使用认证" class="headerlink" title="使用认证"></a>使用认证</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">1.自定义认证类，继承rest_framework.authentication.BaseAuthentication, 实现authenticate方法</span></span><br><span class="line"><span class="string">2.视图类局部配置或全局配置</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> rest_framework.authentication <span class="keyword">import</span> BaseAuthentication</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> exceptions</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyAuthentication</span>(<span class="params">BaseAuthentication</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;自定义认证类继承BaseAuthentication&quot;&quot;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">authenticate</span>(<span class="params">self, request</span>):</span></span><br><span class="line">        <span class="comment"># return None   # 不处理</span></span><br><span class="line">        <span class="comment"># raise exceptions.AuthenticationFailed()  # 认证失败抛出异常</span></span><br><span class="line">        <span class="comment"># return (a, b)  # a赋值给request.user, b赋值给request.auth</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 局部配置</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserView</span>(<span class="params">APIView</span>):</span></span><br><span class="line"></span><br><span class="line">    authentication_classes = [MyAuthentication,]</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 全局配置</span></span><br><span class="line"></span><br><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="string">&#x27;DEFAULT_AUTHENTICATION_CLASSES&#x27;</span>: [</span><br><span class="line">        <span class="string">&#x27;rest_framework.authentication.BasicAuthentication&#x27;</span>,   <span class="comment"># 基本表单认证</span></span><br><span class="line">        <span class="string">&#x27;rest_framework.authentication.SessionAuthentication&#x27;</span>,  <span class="comment"># session认证</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&#x27;UNAUTHENTICATED_USER&#x27;</span>: <span class="literal">None</span>  <span class="comment"># 匿名用户 request.user</span></span><br><span class="line">    <span class="string">&#x27;UNAUTHENTICATED_TOKEN&#x27;</span>: <span class="literal">None</span>  <span class="comment"># 匿名   request.auth</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><img src="/images/drf_auth_class.png" class="" title="DRF认证">


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_authenticate</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Attempt to authenticate the request using each authentication instance</span></span><br><span class="line"><span class="string">    in turn.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> authenticator <span class="keyword">in</span> self.authenticators:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            user_auth_tuple = authenticator.authenticate(self)</span><br><span class="line">        <span class="keyword">except</span> exceptions.APIException:</span><br><span class="line">            self._not_authenticated()</span><br><span class="line">            <span class="keyword">raise</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> user_auth_tuple <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            self._authenticator = authenticator</span><br><span class="line">            self.user, self.auth = user_auth_tuple</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    self._not_authenticated()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Python</category>
        <category>Web</category>
      </categories>
      <tags>
        <tag>Django</tag>
        <tag>Python</tag>
        <tag>Restful</tag>
      </tags>
  </entry>
  <entry>
    <title>DRF最佳实践及源码解读(四)--版本控制</title>
    <url>/2020/04/18/DRF%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5%E5%8F%8A%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB-%E5%9B%9B-%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/</url>
    <content><![CDATA[<img src="/images/djangorestframework.png" class="" title="DRF框架">

<span id="more"></span>

<h2 id="DRF支持queryparams、urlpath等多种方式的路由版本控制"><a href="#DRF支持queryparams、urlpath等多种方式的路由版本控制" class="headerlink" title="DRF支持queryparams、urlpath等多种方式的路由版本控制"></a>DRF支持queryparams、urlpath等多种方式的路由版本控制</h2><h3 id="1-原理"><a href="#1-原理" class="headerlink" title="1.原理"></a>1.原理</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">1.在请求分发前的初始化处理中引入版本控制</span></span><br><span class="line"><span class="string">2.通过versioning_class获取具体的版本控制类</span></span><br><span class="line"><span class="string">3.将获取到的版本version及版本控制对象versioning_scheme赋值给request</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">APIView</span>(<span class="params">View</span>):</span></span><br><span class="line">    versioning_class = api_settings.DEFAULT_VERSIONING_CLASS</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initial</span>(<span class="params">self, request, *args, **kwargs</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Runs anything that needs to occur prior to calling the method handler.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.format_kwarg = self.get_format_suffix(**kwargs)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Perform content negotiation and store the accepted info on the request</span></span><br><span class="line">        neg = self.perform_content_negotiation(request)</span><br><span class="line">        request.accepted_renderer, request.accepted_media_type = neg</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Determine the API version, if versioning is in use.</span></span><br><span class="line">        version, scheme = self.determine_version(request, *args, **kwargs)</span><br><span class="line">        request.version, request.versioning_scheme = version, scheme</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Ensure that the incoming request is permitted</span></span><br><span class="line">        self.perform_authentication(request)</span><br><span class="line">        self.check_permissions(request)</span><br><span class="line">        self.check_throttles(request)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">determine_version</span>(<span class="params">self, request, *args, **kwargs</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        If versioning is being used, then determine any API version for the</span></span><br><span class="line"><span class="string">        incoming request. Returns a two-tuple of (version, versioning_scheme)</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> self.versioning_class <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> (<span class="literal">None</span>, <span class="literal">None</span>)</span><br><span class="line">        scheme = self.versioning_class()</span><br><span class="line">        <span class="keyword">return</span> (scheme.determine_version(request, *args, **kwargs), scheme)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2-用法"><a href="#2-用法" class="headerlink" title="2.用法"></a>2.用法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">最常用的是urlpath中进行版本控制</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">1.全局配置</span></span><br><span class="line"><span class="string">REST_FRAMEWORK = &#123;</span></span><br><span class="line"><span class="string">    # 版本控制类</span></span><br><span class="line"><span class="string">    &quot;DEFAULT_VERSIONING_CLASS&quot;: &quot;rest_framework.versioning.URLPathVersioning&quot;,</span></span><br><span class="line"><span class="string">    # 默认版本</span></span><br><span class="line"><span class="string">    &quot;DEFAULT_VERSION&quot;: &quot;v1&quot;,</span></span><br><span class="line"><span class="string">    # 允许的版本</span></span><br><span class="line"><span class="string">    &quot;ALLOWED_VERSIONS&quot;: [&quot;v1&quot;, &quot;v2&quot;],</span></span><br><span class="line"><span class="string">    # 版本参数名</span></span><br><span class="line"><span class="string">    &quot;VERSION_PARAM&quot;: &quot;version&quot;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">2.路由系统</span></span><br><span class="line"><span class="string">urlpatterns = [</span></span><br><span class="line"><span class="string">    url(r&#x27;^(?P&lt;version&gt;[v1|v2]+)/users/$&#x27;, views.UserView.as_view(), name=&#x27;user&#x27;),</span></span><br><span class="line"><span class="string">]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">3.视图使用</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">class UserView(APIView):</span></span><br><span class="line"><span class="string">    def get(self, request, *args, **kwargs):</span></span><br><span class="line"><span class="string">        # 获取版本</span></span><br><span class="line"><span class="string">        version = request.version</span></span><br><span class="line"><span class="string">        # 获取版本控制对象</span></span><br><span class="line"><span class="string">        version_schema = request.versioning_schema</span></span><br><span class="line"><span class="string">        # 反向生成url</span></span><br><span class="line"><span class="string">        u1 = request.versioning_schema.reverse(viewname=&#x27;user&#x27;, request=request)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">URLPathVersioning</span>(<span class="params">BaseVersioning</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    To the client this is the same style as `NamespaceVersioning`.</span></span><br><span class="line"><span class="string">    The difference is in the backend - this implementation uses</span></span><br><span class="line"><span class="string">    Django&#x27;s URL keyword arguments to determine the version.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    An example URL conf for two views that accept two different versions.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    urlpatterns = [</span></span><br><span class="line"><span class="string">        url(r&#x27;^(?P&lt;version&gt;[v1|v2]+)/users/$&#x27;, users_list, name=&#x27;users-list&#x27;),</span></span><br><span class="line"><span class="string">        url(r&#x27;^(?P&lt;version&gt;[v1|v2]+)/users/(?P&lt;pk&gt;[0-9]+)/$&#x27;, users_detail, name=&#x27;users-detail&#x27;)</span></span><br><span class="line"><span class="string">    ]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    GET /1.0/something/ HTTP/1.1</span></span><br><span class="line"><span class="string">    Host: example.com</span></span><br><span class="line"><span class="string">    Accept: application/json</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line">    default_version = api_settings.DEFAULT_VERSION</span><br><span class="line">    allowed_versions = api_settings.ALLOWED_VERSIONS</span><br><span class="line">    version_param = api_settings.VERSION_PARAM</span><br><span class="line">    invalid_version_message = _(<span class="string">&#x27;Invalid version in URL path.&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">determine_version</span>(<span class="params">self, request, *args, **kwargs</span>):</span></span><br><span class="line">        version = kwargs.get(self.version_param, self.default_version)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.is_allowed_version(version):</span><br><span class="line">            <span class="keyword">raise</span> exceptions.NotFound(self.invalid_version_message)</span><br><span class="line">        <span class="keyword">return</span> version</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverse</span>(<span class="params">self, viewname, args=<span class="literal">None</span>, kwargs=<span class="literal">None</span>, request=<span class="literal">None</span>, <span class="built_in">format</span>=<span class="literal">None</span>, **extra</span>):</span></span><br><span class="line">        <span class="keyword">if</span> request.version <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            kwargs = &#123;&#125; <span class="keyword">if</span> (kwargs <span class="keyword">is</span> <span class="literal">None</span>) <span class="keyword">else</span> kwargs</span><br><span class="line">            kwargs[self.version_param] = request.version</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>(URLPathVersioning, self).reverse(</span><br><span class="line">            viewname, args, kwargs, request, <span class="built_in">format</span>, **extra</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python</category>
        <category>Web</category>
      </categories>
      <tags>
        <tag>Django</tag>
        <tag>Python</tag>
        <tag>Restful</tag>
      </tags>
  </entry>
  <entry>
    <title>GitLab-CI自动化部署</title>
    <url>/2021/05/20/GitLab-CI%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<h2 id="一、概念介绍"><a href="#一、概念介绍" class="headerlink" title="一、概念介绍"></a>一、概念介绍</h2><h3 id="CI-CD概念"><a href="#CI-CD概念" class="headerlink" title="CI/CD概念"></a>CI/CD概念</h3><p>CI/CD 是一种通过在应用开发阶段引入自动化来频繁向客户交付应用的方法。CI/CD 的核心概念是持续集成、持续交付和持续部署。CI/CD 主要针对的是在集成新代码时所引发的问题（“集成地狱”）。</p>
<p>具体而言，CI/CD 可让持续自动化和持续监控贯穿于应用的整个生命周期（从集成和测试阶段，到交付和部署）。这些关联的事务通常被统称为“CI/CD 管道”，由开发和运维团队以敏捷方式协同支持。</p>
<p>借助CI/CD，开发人员可以对迭代的代码更新进行连续构建、测试和部署。此过程避免了频繁又繁琐的手动构建、部署过程，既节省了开发时间，同时减少了人工干预导致的各种异常情况。</p>
<span id="more"></span>

<h3 id="CI-持续集成-（Continuous-Integration）"><a href="#CI-持续集成-（Continuous-Integration）" class="headerlink" title="CI 持续集成 （Continuous Integration）"></a>CI 持续集成 （Continuous Integration）</h3><p>CI/CD 中的“CI”始终指持续集成，它属于开发人员的自动化流程。现代应用的开发往往会将代码存储在共享存储库中，开发人员每天要推送代码更改。那么对于每次向代码库的推送操作，可以创建一组脚本来自动化构建和测试代码更改，这些脚本有助于减少手动操作而引入错误的机会。这种做法就被称为“持续集成”。</p>
<p>成功的 CI 意味着应用代码的新更改会定期构建、测试并合并到共享代码库中。该方案可以解决在一次开发中有太多应用分支，从而导致相互冲突的问题。</p>
<h3 id="CD-持续部署（Continuous-Deployment）"><a href="#CD-持续部署（Continuous-Deployment）" class="headerlink" title="CD 持续部署（Continuous Deployment）"></a>CD 持续部署（Continuous Deployment）</h3><p>持续部署是持续集成的下一步，代码构建完毕后，可以自动地将新版本部署上线，这样有利于快速迭代并交付产品。</p>
<h3 id="CD-持续交付（Continuous-Delivery）"><a href="#CD-持续交付（Continuous-Delivery）" class="headerlink" title="CD 持续交付（Continuous Delivery）"></a>CD 持续交付（Continuous Delivery）</h3><p>持续交付是持续集成的又一个步骤，与持续部署不同的时，需要人工干预才能出发变更的部署。</p>
<h2 id="二、Gitlab-CI-CD"><a href="#二、Gitlab-CI-CD" class="headerlink" title="二、Gitlab CI/CD"></a>二、Gitlab CI/CD</h2><p>Gitlab CI/CD（简称Gitlab-CI）是Gitlab官方提供的基于Gitlab的CI/CD服务，开发人员可以在项目仓库的根目录下创建.gitlab-ci.yml文件，并在其中定义CI/CD流程模板。这样在每次提交后，系统可以自动地执行构建、测试、检查等任务。</p>
<p>Gitlab-CI的配置非常简单，只需部署一个Runner程序，并完成Runner的注册即可完成一套CI/CD系统的搭建。并且Gitlab-CI的Runner程序由Go编写，因此部署Runner也很简单，尤其是用Docker部署！</p>
<p>这里先介绍一下Gitlab-CI中的一些名词概念：</p>
<h4 id="Job"><a href="#Job" class="headerlink" title="Job"></a>Job</h4><p>Job 为一个具体执行的任务，是 GitLab-CI 系统中可以独立控制并运行的最小单位，也是.gitlab-ci.yml文件中的最基本元素。</p>
<p>Job特征：</p>
<ul>
<li>定义了约束条件，指出应当在什么条件下执行。</li>
<li>job是顶级元素，job的名称可以自定义，并且必须包含<code>script</code>子句</li>
<li>job的数量没有限制</li>
</ul>
<p>Job示例：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">job1:</span></span><br><span class="line">  <span class="attr">script:</span> <span class="string">&quot;execute-script-for-job1&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">job2:</span></span><br><span class="line">  <span class="attr">script:</span> <span class="string">&quot;execute-script-for-job2&quot;</span> </span><br></pre></td></tr></table></figure> 
<p>上面的示例是具有两个单独作业的最简单的配置，Job可以在代码库中直接执行代码或脚本。</p>
<p>在提交代码后，开发者可以针对特定的 commit 完成一个或多个 job，从而进行 CI/CD 操作。</p>
<h4 id="Pipeline"><a href="#Pipeline" class="headerlink" title="Pipeline"></a>Pipeline</h4><p>Pipeline即任务管道，是CI/CD的顶级组件。在一个Pipeline中可以像流水线一样执行多个Job。Pipeline由Runner执行。</p>
<p>Pipeline包括：</p>
<ul>
<li>Job: 定义要做什么。例如编译或测试代码。</li>
<li>Stage: 定义何时运行作业。例如在编译之后运行测试。</li>
</ul>
<p>如果一个Stage中的所有Job都执行成功，则Pipeline将继续进行到下一个Stage。<br>如果某个Stage中的任何Job执行失败，则Pipeline不会执行下一个Stage，并提前结束。</p>
<h4 id="Stage"><a href="#Stage" class="headerlink" title="Stage"></a>Stage</h4><p>一个Pipline中通常会分为几个阶段（Stage），将Job划分在不同的阶段进行顺序执行。</p>
<h4 id="Pipeline示例"><a href="#Pipeline示例" class="headerlink" title="Pipeline示例"></a>Pipeline示例</h4><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">build-job:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">build</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;Hello, $GITLAB_USER_LOGIN!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">test-job1:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">test</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;This job tests something&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">test-job2:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">test</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;This job tests something, but takes more time than test-job1.&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;After the echo commands complete, it runs the sleep command for 20 seconds&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;which simulates a test that runs 20 seconds longer than test-job1&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">sleep</span> <span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="attr">deploy-prod:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">deploy</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;This job deploys something from the $CI_COMMIT_BRANCH branch.&quot;</span> </span><br></pre></td></tr></table></figure> 
<p>上面的配置对应到Gitlab-CI中进行可视化展示如下图：</p>
<img src="/images/gitlab_ci_flow.png" class="" title="gitlab ci flow">

<h4 id="Runner"><a href="#Runner" class="headerlink" title="Runner"></a>Runner</h4><p>在Gitlab-CI中，Runner可以理解为是一个在特定机器上根据.gitlab-ci.yml配置文件生成并运行Pipeline的程序。它从Gitlab获取CI作业，运行该作业，并将结果发送回Gitlab实例。</p>
<p>Runner有三种类型：</p>
<ul>
<li>Shared Runner: Gitlab中所有项目和组都可以使用的共享Runner。</li>
<li>Group Runner: 可用于组中所有项目和子组的Runner。</li>
<li>Specific Runner: 只能在指定项目中使用的Runner。</li>
</ul>
<img src="/images/runner_types.png" class="" title="gitlab runner types">

<h4 id="Executor"><a href="#Executor" class="headerlink" title="Executor"></a>Executor</h4><p>Runner执行Pipeline是需要基于特定的平台（环境）的，这个平台（环境）就是Executor。我们在注册Runner时，程序会提示我们选择指定的平台类型，可供选择的有SSH、Shell、VirtualBox、Docker等等。</p>
<h2 id="三、-gitlab-ci-yml流程配置详解"><a href="#三、-gitlab-ci-yml流程配置详解" class="headerlink" title="三、.gitlab-ci.yml流程配置详解"></a>三、.gitlab-ci.yml流程配置详解</h2><p>一个简单且完整的.gitlab-ci.yml配置文件如下：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">before_script:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;starting build vul_crawling....&quot;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">echo</span> <span class="string">$CI_COMMIT_TAG</span></span><br><span class="line"></span><br><span class="line"><span class="attr">stages:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">build_docker_image</span></span><br><span class="line"></span><br><span class="line"><span class="attr">build_docker_images-job:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">build_docker_image</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">gitlab/dind</span></span><br><span class="line">  <span class="attr">services:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">docker:dind</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">bash</span> <span class="string">.deploy/build.sh</span> <span class="string">-e</span> <span class="string">$&#123;CI_COMMIT_TAG%-*&#125;</span> <span class="string">-v</span> <span class="string">$&#123;CI_COMMIT_TAG#*-&#125;</span> <span class="string">-u</span> <span class="string">$DOCKER_USER</span> <span class="string">-p</span> <span class="string">$DOCKER_PASSWORD</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/(test|prod)-\d+\.\d+\.\d+$/</span></span><br><span class="line">  <span class="attr">tags:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">sec_docker_runner</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>通常一个.gitlab-ci.yml文件中会定义一个<code>stages</code>和若干个<code>job</code>, <code>stages</code>中定义了整个流程的各个阶段，而<code>job</code>则定义了具体执行的任务、任务所处阶段和一些约束条件。</p>
<p>下面对.gitlab-ci.yml中的关键字做简单介绍：</p>
<ol>
<li>不能被用于Job名称的保留关键字</li>
</ol>
<ul>
<li><code>image</code>: 使用的Docker镜像</li>
<li><code>services</code>: 使用的Docker服务的镜像</li>
<li><code>stages</code>: 定义流程的阶段</li>
<li><code>types</code>: <code>stages</code>的别名（不建议使用）</li>
<li><code>before_script</code>：在Job执行前执行的一组命令</li>
<li><code>after_script</code>: 在Job执行后执行的一组命令</li>
<li><code>variables</code>: 定义流程中的变量</li>
<li><code>cache</code>: 定义将被缓存的文件列表，后续任务可用</li>
<li><code>include</code>：包含其他的YAML文件</li>
</ul>
<ol start="2">
<li>定义Job的关键字</li>
</ol>
<ul>
<li><code>before_script</code>: 在Job执行前执行的一组命令</li>
<li><code>after_script</code>: 在Job执行后执行的一组命令</li>
<li><code>allow_failure</code>: 允许任务失败，任务失败不会导致pipeline失败</li>
<li><code>artifacts</code>: 指定依附于Job的文件和目录列表，在任务结束后，可以在gitlab UI上下载这些文件和目录</li>
<li><code>cache</code>: 定义将被缓存的文件列表，后续任务可用</li>
<li><code>coverage</code>: 定义给定作业的代码覆盖率设置</li>
<li><code>dependencies</code>: 定义job依赖关系，这样他们就可以互相传递artifacts</li>
<li><code>environment</code>: 定义此作业完成部署的环境名称</li>
<li><code>only</code>: 定义在哪些分支上创建Jobs</li>
<li><code>except</code>: 定义哪些分支不创建Jobs</li>
<li><code>extends</code>: 从其他job继承，字段会合并</li>
<li><code>image</code>:    指定job使用的Docker镜像</li>
<li><code>include</code>: 包含其他的YAML文件</li>
<li><code>inherit</code>: 控制全局定义的默认值和变量的继承关系</li>
<li><code>interruptible</code>: 设置一个新的pipeline运行时将取消正在运行的pipeline</li>
<li><code>needs</code>: 定义job的依赖关系，可以使job之间进行无序执行</li>
<li><code>retry</code>: 发生故障时可以自动重试作业的时间和次数</li>
<li><code>rules</code>:</li>
<li><code>script</code>: 运行程序执行的Shell脚本</li>
<li><code>secrets</code>:</li>
<li><code>services</code>: 使用Docker的服务映像</li>
<li><code>stage</code>: 定义工作阶段</li>
<li><code>tags</code>: 定义可以由包含哪些tag的Runner来执行Job</li>
<li><code>variables</code>: 在Job级别上定义Job变量</li>
<li><code>when</code>: 定义Job执行的时机</li>
</ul>
<p>常用关键字详解：</p>
<ol>
<li><code>before_script</code>、<code>script</code>、<code>after_script</code><br><code>before_script</code>和<code>after_script</code>分别指在Job执行前和Job执行后执行的命令，可以定义在Job级别，也可以定义为顶级元素，定义为顶级元素将为每一个任务都执行相应阶段的脚本或命令。<code>script</code>只能在Job中定义，表示具体执行的任务内容。<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">default:</span></span><br><span class="line">  <span class="attr">before_script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;Execute this script in all jobs that don&#x27;t already have a before_script section.&quot;</span></span><br><span class="line">  <span class="attr">after_script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;Execute this script in all jobs that don&#x27;t already have an after_script section.&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">job1:</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;This script executes first. When it completes, the global after_script executes.&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">job:</span></span><br><span class="line">  <span class="attr">before_script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;Execute this script instead of the global before_script.&quot;</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;This script executes first. When it completes, the job&#x27;s `after_script` executes.&quot;</span></span><br><span class="line">  <span class="attr">after_script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;Execute this script instead of the global after_script.&quot;</span></span><br></pre></td></tr></table></figure></li>
<li><code>stages</code></li>
</ol>
<p>使用<code>stages</code>定义pipeline的工作阶段，同一stage中的job可以并行执行。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">stages:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">build</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">test</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">deploy</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li><code>variables</code></li>
</ol>
<p>使用<code>variables</code>可以在.gitlab-ci.yml中定义变量，这些变量会被设置入任务执行环境，可以在job中使用。</p>
<p>变量除了可以在.gitlab-ci.yml中定义外，还可以在gitlab上定义，如图：</p>
<img src="/images/gitlab_ci_variables.png" class="" title="gitlab_ci_variables">

<p>另外gitlab-CI还预定义了一些变量，可以直接在任务中使用，详见：<a href="https://docs.gitlab.com/ee/ci/variables/predefined_variables.html">https://docs.gitlab.com/ee/ci/variables/predefined_variables.html</a></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">script:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">bash</span> <span class="string">.deploy/build.sh</span> <span class="string">-e</span> <span class="string">$&#123;CI_COMMIT_TAG%-*&#125;</span> <span class="string">-v</span> <span class="string">$&#123;CI_COMMIT_TAG#*-&#125;</span> <span class="string">-u</span> <span class="string">$DOCKER_USER</span> <span class="string">-p</span> <span class="string">$DOCKER_PASSWORD</span></span><br></pre></td></tr></table></figure>

<ol start="5">
<li><p><code>only</code>、<code>except</code><br>only和except约束了job在什么情况下会被创建，only定义了在哪些分支或标签上创建，except定义了job不会在哪些分支合标签上创建。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">only:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">/(test|prod)-\d+\.\d+\.\d+$/</span></span><br></pre></td></tr></table></figure></li>
<li><p><code>tags</code><br>在注册Runner时，程序会提示Runner对应的tags。使用tags可以约束由对应tags的Runner来执行Job，如果没有tags对应的Runner可用，则任务不会被执行。</p>
</li>
</ol>
<h2 id="四、Gitlab-CI自动构建流程搭建实战"><a href="#四、Gitlab-CI自动构建流程搭建实战" class="headerlink" title="四、Gitlab-CI自动构建流程搭建实战"></a>四、Gitlab-CI自动构建流程搭建实战</h2><h3 id="1-安装和运行Runner"><a href="#1-安装和运行Runner" class="headerlink" title="1.安装和运行Runner"></a>1.安装和运行Runner</h3><ol>
<li><p>选择一台服务器作为部署Runner的机器（确保与部署Gitlab的机器能正常通讯）。</p>
</li>
<li><p>选择Runner的安装方式。常用的Runner安装方式主要有两种：一是基于Docker镜像安装在容器中；二是下载二进制文件直接安装在服务器中。</p>
</li>
<li><h4 id="二进制文件安装"><a href="#二进制文件安装" class="headerlink" title="二进制文件安装"></a>二进制文件安装</h4></li>
<li><p>针对服务器的系统下载对应的二进制文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Linux x86-64</span></span><br><span class="line">sudo curl -L --output /usr/local/bin/gitlab-runner &quot;https://gitlab-runner-downloads.s3.amazonaws.com/latest/binaries/gitlab-runner-linux-amd64&quot;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Linux x86</span></span><br><span class="line">sudo curl -L --output /usr/local/bin/gitlab-runner &quot;https://gitlab-runner-downloads.s3.amazonaws.com/latest/binaries/gitlab-runner-linux-386&quot;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Linux arm</span></span><br><span class="line">sudo curl -L --output /usr/local/bin/gitlab-runner &quot;https://gitlab-runner-downloads.s3.amazonaws.com/latest/binaries/gitlab-runner-linux-arm&quot;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Linux arm64</span></span><br><span class="line">sudo curl -L --output /usr/local/bin/gitlab-runner &quot;https://gitlab-runner-downloads.s3.amazonaws.com/latest/binaries/gitlab-runner-linux-arm64&quot;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Linux s390x</span></span><br><span class="line">sudo curl -L --output /usr/local/bin/gitlab-runner &quot;https://gitlab-runner-downloads.s3.amazonaws.com/latest/binaries/gitlab-runner-linux-s390x&quot;</span><br></pre></td></tr></table></figure></li>
<li><p>添加执行权限</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo chmod +x /usr/local/bin/gitlab-runner</span><br></pre></td></tr></table></figure></li>
<li><p>创建一个Gitlab-CI 用户</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo useradd --comment &#x27;GitLab Runner&#x27; --create-home gitlab-runner --shell /bin/bash</span><br></pre></td></tr></table></figure></li>
<li><p>安装和运行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo gitlab-runner install --user=gitlab-runner --working-directory=/home/gitlab-runner</span><br><span class="line">sudo gitlab-runner start</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="基于Docker镜像安装"><a href="#基于Docker镜像安装" class="headerlink" title="基于Docker镜像安装"></a>基于Docker镜像安装</h4><ol>
<li>基于<code>gitlab/gitlab-runner:latest</code>镜像来启动Runner容器<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">	--name gitlab-runner \</span><br><span class="line">    --restart always \</span><br><span class="line">    --privileged=true \ </span><br><span class="line">    -v /srv/gitlab-runner/config:/etc/gitlab-runner \ </span><br><span class="line">    -v /var/run/docker.sock:/var/run/docker.sock \</span><br><span class="line">    gitlab/gitlab-runner:latest</span><br></pre></td></tr></table></figure>
注意，这里将runner的配置目录挂载到宿主机文件系统，便于修改配置。同时把宿主机docker.sock挂载到容器中，是为了后面在容器中使用docker命令时（docker in docker）直接调用宿主机的Docker daemon。</li>
</ol>
<h3 id="2-注册Runner"><a href="#2-注册Runner" class="headerlink" title="2.注册Runner"></a>2.注册Runner</h3><h4 id="二进制安装"><a href="#二进制安装" class="headerlink" title="二进制安装"></a>二进制安装</h4><ol>
<li>运行注册命令<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo gitlab-runner register</span><br></pre></td></tr></table></figure></li>
<li>根据提示输入相应信息完成注册</li>
</ol>
<ul>
<li>输入Gitlab服务的URL</li>
<li>输入注册token</li>
<li>输入runner的描述信息</li>
<li>输入runner关联的标签，以逗号分隔</li>
<li>选择executor，runner的执行平台</li>
</ul>
<h4 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h4><ol>
<li>进入gitlab-runner容器执行注册<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker exec -it gitlab-runner gitlab-runner register</span><br></pre></td></tr></table></figure></li>
<li>根据命令行提示输入相应信息完成注册。</li>
</ol>
<ul>
<li>输入Gitlab服务的URL</li>
<li>输入注册token。token在gitlabUI-settings-CI/CD-Runner-expand下</li>
<li>输入runner的描述信息</li>
<li>输入runner关联的标签，以逗号分隔</li>
<li>选择executor，runner的执行平台</li>
<li>输入默认的docker镜像（如果job中未指定执行的镜像，将使用默认的）</li>
</ul>
<p>示例如下：</p>
<img src="/images/runner_register.png" class="" title="runner_register">

<ol start="3">
<li><p>修改刚注册成功的runner配置<br>配置文件路径：/etc/gitlab-runner/config.toml。将<code>privileged</code>选项改为<code>true</code>。不然在执行job的时候可能会遇到问题，参见：<a href="https://gitlab.com/gitlab-org/gitlab-runner/-/issues/1544">https://gitlab.com/gitlab-org/gitlab-runner/-/issues/1544</a></p>
</li>
<li><p>重启runner容器</p>
</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker restart gitlab-runner</span><br></pre></td></tr></table></figure>

<h3 id="3-添加-gitlab-ci-yml"><a href="#3-添加-gitlab-ci-yml" class="headerlink" title="3.添加.gitlab-ci.yml"></a>3.添加.gitlab-ci.yml</h3><p>在项目根目录下创建.gitlab-ci.yml文件，配置任务执行流程<br>例如：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attr">before_script:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;starting build vul_crawling....&quot;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">echo</span> <span class="string">$CI_COMMIT_TAG</span></span><br><span class="line"></span><br><span class="line"><span class="attr">stages:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">build_docker_image</span></span><br><span class="line"></span><br><span class="line"><span class="attr">build_docker_images-job:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">build_docker_image</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">gitlab/dind</span></span><br><span class="line">  <span class="attr">services:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">docker:dind</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">bash</span> <span class="string">.deploy/build.sh</span> <span class="string">-e</span> <span class="string">$&#123;CI_COMMIT_TAG%-*&#125;</span> <span class="string">-v</span> <span class="string">$&#123;CI_COMMIT_TAG#*-&#125;</span> <span class="string">-u</span> <span class="string">$DOCKER_USER</span> <span class="string">-p</span> <span class="string">$DOCKER_PASSWORD</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/(test|prod)-\d+\.\d+\.\d+$/</span></span><br><span class="line">  <span class="attr">tags:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">sec_docker_runner</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="4-添加自定义变量"><a href="#4-添加自定义变量" class="headerlink" title="4.添加自定义变量"></a>4.添加自定义变量</h3><p>在gitlab UI - Settings - CI/CD - Variables下添加自定义变量</p>
<h3 id="5-流程测试"><a href="#5-流程测试" class="headerlink" title="5.流程测试"></a>5.流程测试</h3><p>完成以上步骤后，Gitlab-Ci自动构建部署流程已配置完成。在上例中，当有分支或Tag名称类似<code>test-0.0.1</code>或<code>prod-0.0.1</code>时，系统将自动创建pipeline完成自动化构建部署。</p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
</search>
